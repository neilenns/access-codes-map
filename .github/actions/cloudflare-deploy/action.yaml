name: "Deploy to Cloudflare"
description: "Prunes, builds, and deploys the web app to Cloudflare"

inputs:
  cloudflare_account_id:
    required: true
    description: "Cloudflare account ID for deployment"
  cloudflare_api_token:
    required: true
    description: "Cloudflare API token for deployment"
  cloudflare_d1_token:
    required: true
    description: "Cloudflare token for interacting with D1 databases"
  deploy_env:
    required: true
    description: "The environment to deploy to (e.g., dev, prod)"
  turbo_token:
    required: true
    description: "Turborepo token for remote cache authentication"
  turbo_team:
    required: true
    description: "Team name for Turborepo remote cache"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: pnpm/action-setup@v4
      with:
        version: 10.10.0

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "pnpm"

    - name: Prep for build
      run: pnpx turbo prune --scope=web
      shell: bash
      env:
        TURBO_TOKEN: ${{ inputs.turbo_token }}
        TURBO_TEAM: ${{ inputs.turbo_team }}

    - name: Install dependencies
      working-directory: ./out
      run: pnpm install
      shell: bash

    - name: Deploy to Cloudflare
      working-directory: ./out
      run: pnpx turbo run cf:deploy
      shell: bash
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        DEPLOY_ENV: ${{ inputs.deploy_env }}

    - name: Deploy secrets to Cloudflare and migrate database
      uses: cloudflare/wrangler-action@v3
      env:
        CLOUDFLARE_D1_TOKEN: ${{ inputs.cloudflare_d1_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
      with:
        apiToken: ${{ inputs.cloudflare_api_token }}
        environment: ${{ inputs.deploy_env }}
        workingDirectory: ./out/apps/web
        secrets: |
          CLOUDFLARE_D1_TOKEN
          CLOUDFLARE_ACCOUNT_ID
        command: |
          d1 migrations apply ACCESS_CODES_DB ==env=${{ inputs.deploy_env}} --remote
