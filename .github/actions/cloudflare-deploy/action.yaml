name: "Deploy to Cloudflare"
description: "Prunes, builds, and deploys the web app to Cloudflare"

inputs:
  app_base_url:
    required: true
    description: "Base URL for the application"
  auth0_client_id:
    required: true
    description: "Auth0 client ID for deployment"
  auth0_client_secret:
    required: true
    description: "Auth0 client secret for deployment"
  auth0_secret:
    required: true
    description: "Auth0 secret for deployment"
  cloudflare_account_id:
    required: true
    description: "Cloudflare account ID for deployment"
  cloudflare_api_token:
    required: true
    description: "Cloudflare API token for deployment"
  cloudflare_d1_token:
    required: true
    description: "Cloudflare token for interacting with D1 databases"
  cloudflare_database_id:
    required: true
    description: "Cloudflare database ID for the access codes database"
  deploy_env:
    required: true
    description: "The environment to deploy to (e.g., dev, prod)"
  turbo_token:
    required: true
    description: "Turborepo token for remote cache authentication"
  turbo_team:
    required: true
    description: "Team name for Turborepo remote cache"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache next.js
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/apps/web/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('./pnpm-lock.yaml') }}-${{ hashFiles('./apps/web/**/*.js', './apps/web/**/*.jsx', './apps/web/**/*.ts', './apps/web/**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('./pnpm-lock.yaml') }}-

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        run_install: false

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "pnpm"

    - name: Install dependencies
      shell: bash
      run: pnpm install --frozen-lockfile

    - name: Deploy secrets to Cloudflare
      working-directory: ./apps/web
      shell: bash
      run: |
        echo "${{ inputs.cloudflare_account_id }}" | pnpx wrangler secret put CLOUDFLARE_ACCOUNT_ID --env ${{ inputs.deploy_env }}
        echo "${{ inputs.cloudflare_d1_token }}" | pnpx wrangler secret put CLOUDFLARE_D1_TOKEN --env ${{ inputs.deploy_env }}
        echo "${{ inputs.auth0_client_id }}" | pnpx wrangler secret put AUTH0_CLIENT_ID --env ${{ inputs.deploy_env }}
        echo "${{ inputs.auth0_client_secret }}" | pnpx wrangler secret put AUTH0_CLIENT_SECRET --env ${{ inputs.deploy_env }}
        echo "${{ inputs.auth0_secret }}" | pnpx wrangler secret put AUTH0_SECRET --env ${{ inputs.deploy_env }}
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}

    - name: Migrate database
      uses: cloudflare/wrangler-action@v3
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
      with:
        apiToken: ${{ inputs.cloudflare_api_token }}
        environment: ${{ inputs.deploy_env }}
        workingDirectory: ./apps/web
        command: |
          d1 migrations apply ACCESS_CODES_DB --env=${{ inputs.deploy_env}} --remote

    - name: Deploy to Cloudflare
      run: pnpx turbo run cf:deploy
      shell: bash
      env:
        APP_BASE_URL: ${{ inputs.app_base_url }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        CLOUDFLARE_D1_TOKEN: ${{ inputs.cloudflare_d1_token }}
        CLOUDFLARE_DATABASE_ID: ${{ inputs.cloudflare_database_id }}
        DEPLOY_ENV: ${{ inputs.deploy_env }}
        TURBO_TOKEN: ${{ inputs.turbo_token }}
        TURBO_TEAM: ${{ inputs.turbo_team }}
